services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
    networks:
      - app_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    command: ["/wait_for_backend.sh"]
    ports:
      - "3000:80"
    networks:
      - app_network

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: [
        "CMD-SHELL",
        "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"
      ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app_network

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    volumes:
      - redis_data:/data
    env_file:
      - .env
    command: >
      sh -c "
        [ -n \"$$REDIS_PASSWORD\" ] && exec redis-server --requirepass $$REDIS_PASSWORD || exec redis-server
      "
    ports:
      - "6379:6379"
    healthcheck:
      test: [
        "CMD-SHELL",
        "[ -n \"$$REDIS_PASSWORD\" ] && redis-cli -a $$REDIS_PASSWORD ping | grep -q PONG || redis-cli ping | grep -q PONG"
      ]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - app_network
volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge

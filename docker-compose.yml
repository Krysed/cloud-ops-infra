services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
    networks:
      - app_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    volumes:
      - ./secrets/db_config.json:/app/secrets/db_config.json:ro
    environment:
      - DB_CONFIG_PATH=/app/secrets/db_config.json
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - ENV=dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    command: ["/wait_for_backend.sh"]
    ports:
      - "3000:80"
    networks:
      - app_network

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    volumes:
      - ./secrets/db_config.json:/tmp/db_config.json:ro
      - postgres_data:/var/lib/postgresql/data
    command: >
      sh -c "
        export POSTGRES_USER=$$(jq -r '.POSTGRES.user' /tmp/db_config.json) &&
        export POSTGRES_PASSWORD=$$(jq -r '.POSTGRES.password' /tmp/db_config.json) &&
        export POSTGRES_DB=$$(jq -r '.POSTGRES.dbname' /tmp/db_config.json) &&
        exec docker-entrypoint.sh postgres
      "
    ports:
      - "5432:5432"
    healthcheck:
      test: [
        "CMD-SHELL",
        "pg_isready -U $$(jq -r '.POSTGRES.user' /tmp/db_config.json) -d $$(jq -r '.POSTGRES.dbname' /tmp/db_config.json)"
      ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app_network

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    volumes:
      - ./secrets/db_config.json:/tmp/db_config.json:ro
      - redis_data:/data
    command: >
      sh -c "
        export REDIS_PASSWORD=$$(jq -r '.REDIS.password // empty' /tmp/db_config.json) &&
        [ -n \"$$REDIS_PASSWORD\" ] && exec redis-server --requirepass $$REDIS_PASSWORD || exec redis-server
      "
    ports:
      - "6379:6379"
    healthcheck:
      test: [
        "CMD-SHELL",
        "redis-cli -a $$(jq -r '.REDIS.password // empty' /tmp/db_config.json) ping | grep -q PONG"
      ]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - app_network
volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge

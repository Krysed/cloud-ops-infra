services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    volumes:
      - type: bind
        source: ./secrets/db_config.json
        target: /app/secrets/db_config.json
        read_only: true
      - type: bind
        source: ./backend/static
        target: /app/static
        read_only: true
      - type: bind
        source: ./backend/template
        target: /app/template
        read_only: true
    environment:
      - DB_CONFIG_PATH=/app/secrets/db_config.json
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    build:
      context: ./db
      dockerfile: Dockerfile
    volumes:
      - ./secrets/db_config.json:/tmp/db_config.json:ro
      - postgres_data:/var/lib/postgresql/data
    command: >
      sh -c "
        export POSTGRES_USER=$$(jq -r '.POSTGRES.user' /tmp/db_config.json) &&
        export POSTGRES_PASSWORD=$$(jq -r '.POSTGRES.password' /tmp/db_config.json) &&
        export POSTGRES_DB=$$(jq -r '.POSTGRES.dbname' /tmp/db_config.json) &&
        exec docker-entrypoint.sh postgres
      "
    ports:
      - "5432:5432"
    healthcheck:
      test: [
        "CMD-SHELL",
        "pg_isready -U $$(jq -r '.POSTGRES.user' /tmp/db_config.json) -d $$(jq -r '.POSTGRES.dbname' /tmp/db_config.json)"
      ]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    volumes:
      - ./secrets/db_config.json:/tmp/db_config.json:ro
      - redis_data:/data
    command: >
      sh -c "
        export REDIS_PASSWORD=$$(jq -r '.REDIS.password // empty' /tmp/db_config.json) &&
        [ -n \"$$REDIS_PASSWORD\" ] && exec redis-server --requirepass $$REDIS_PASSWORD || exec redis-server
      "
    ports:
      - "6379:6379"
    healthcheck:
      test: [
        "CMD-SHELL",
        "redis-cli -a $$(jq -r '.REDIS.password // empty' /tmp/db_config.json) ping | grep -q PONG"
      ]
      interval: 5s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
  redis_data:
